#!/bin/bash

# Unlock the release repos and move the pre-release packages into them.
# Create a version-specific release tag (for non-data-only releases)
# Lock the release repos
# Write release notes and update information on UW's AFS

. release-common.sh
detect_rescue_file

if [[ ! -d /p/vdt/public/html/release-info/ && $DRY_RUN -eq 0 ]]; then
    print_header "Not on UW's AFS..."
    print_header "Enter username and machine name to use for scp (e.g. matyas@ingwe.cs.wisc.edu):"
    read rusermachine
fi

for ver in ${versions[@]}; do
    branch=$(osg_release $ver)
    if [[ $branch == 'upcoming' ]]; then
        ver=$upcoming_version
    fi
    read -ra dvers <<< $(osg_dvers $ver) # create array of dvers
    for dver in ${dvers[@]}; do
        prerelease_repo=osg-$branch-$dver-prerelease
        release_repo=osg-$branch-$dver-release

        # Push from pre-release to release
        print_header "Unlocking $release_repo"
        run_cmd "osg-koji edit-tag --unlock $release_repo"
        echo

        print_header "Moving packages from $prerelease_repo to $release_repo"
        pkgs_to_release $branch $dver > move-to-$branch-release-$dver
        if [ -s move-to-$branch-release-$dver ]; then
            run_cmd "xargs --arg-file move-to-$branch-release-$dver osg-koji move-pkg $prerelease_repo $release_repo"
        fi
        echo

        if [ $DATA -eq 0 ]; then
            # Create new release repo for non-$data releases
            versioned_release_repo=osg-$branch-$dver-release-$ver
            print_header "Cloning $release_repo to $versioned_release_repo"
            run_cmd "osg-koji clone-tag $release_repo $versioned_release_repo"
            echo
        else
            data_rel=-$DATA # for writing data-specific release notes
            data_option="--since " # option for list-package-updates for data releases
        fi

        # Lock repos (data-only releases leave the versioned repos untouched
        # for historical integrity)
        for repo in $release_repo $versioned_release_repo; do
            print_header "Locking $repo"
            run_cmd "osg-koji edit-tag --lock $repo"
            echo
        done

        if [ -s move-to-$branch-release-$dver ]; then
            # Write release notes
            cp /dev/null $branch-release-note-packages-$dver
            for package in $(<move-to-$branch-release-$dver); do
                uri_package=${package//+/%2B}
                echo "-   [$package](https://koji.chtc.wisc.edu/koji/search?match=glob&type=build&terms=$uri_package)" \
                    >> $branch-release-note-packages-$dver
            done
            xargs --arg-file move-to-$branch-release-$dver osg-koji buildinfo | fgrep "/mnt" | \
                xargs -n 1 basename | perl -p -e "s/\.(noarch|src|i386|x86_64)\.rpm//" | \
                sort -u > $branch-release-note-rpms-$dver

            # Update info
            run_cmd "cp move-to-$branch-release-$dver $ver$data_rel-updated-$branch-$dver.txt"
            run_cmd "osg-koji list-tagged --quiet --latest $release_repo | awk '{print \$1}' > $ver$data_rel-packages-$branch-$dver.txt"
            run_cmd "xargs --arg-file $ver$data_rel-packages-$branch-$dver.txt osg-koji buildinfo | fgrep \"/mnt\" | xargs -n 1 basename | sort > $ver$data_rel-rpms-$branch$data_rel-$dver.txt"
            echo
        fi
    done

    # RPM update release-notes don't need to specify the dver
    if [[ $branch =~ .*upcoming.* ]]; then
        list-package-updates -u $ver > $branch-release-note-rpm-updates
    else
        list-package-updates $data_option$ver > $branch-release-note-rpm-updates
    fi
done

# Copy release info files over to AFS
release_files=`awk '/\.txt$/ {printf "%s ", $NF}' $rescue_file`
print_header "Copying files over to UW's AFS"
if [ -d /p/vdt/public/html/release-info/ ]; then
    run_cmd "cp $release_files /p/vdt/public/html/release-info/"
else
    # run_cmd does not play nice with commands requiring user input. we don't
    # need to keep track anyway since this is the last command
    rsync -avz $release_files $rusermachine:/p/vdt/public/html/release-info/
fi
check_file_transfer_rc $?

# Don't remove rescue files if user is troubleshooting
if [ $DRY_RUN -eq 0 ]; then
    cleanup_on_success
fi
