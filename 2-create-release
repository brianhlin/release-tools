#!/bin/bash

. release-common.sh

####################################
# Push from pre-release to release #
####################################

for branch in "${branches[@]}"; do
    for dver in el5 el6; do
        echo '==========================================================================='
        echo "Unlocking osg-$branch-$dver-release"
        osg-koji edit-tag --unlock osg-$branch-$dver-release
        echo

        echo '==========================================================================='
        echo "Moving packages from osg-$branch-$dver-prerelease to osg-$branch-$dver-release"
        osg-koji list-tagged --quiet osg-$branch-$dver-prerelease | awk '{print $1}' > move-to-$branch-release-$dver
        xargs --arg-file move-to-$branch-release-$dver osg-koji move-pkg osg-$branch-$dver-prerelease osg-$branch-$dver-release

        echo
    done
done

############################
# Create new release repos #
############################

for branch in "${branches[@]}"; do
    for dver in el5 el6; do
        echo "Cloning osg-$branch-$dver-release to osg-$branch-$dver-release-$version"
        osg-koji clone-tag osg-$branch-$dver-release osg-$branch-$dver-release-$version
        echo
    done
done

##############
# Lock repos #
##############

for branch in "${branches[@]}"; do
    for dver in el5 el6; do
        echo "Locking osg-$branch-$dver-release-$version"
        osg-koji edit-tag --lock osg-$branch-$dver-release-$version
        echo
    done
done

###############
# Regen repos #
###############

for branch in "${branches[@]}"; do
    for dver in el5 el6; do
        echo "Regenerating osg-$branch-$dver-release-$version"
        osg-koji regen-repo --nowait osg-$branch-$dver-release-$version
        echo
    done
done

#######################
# Write release notes #
#######################

echo "Writing lists of packages and RPM's for release notes..."

for branch in "${branches[@]}"; do
    for dver in el5 el6; do
        awk '{ print "   * [[https://koji-hub.batlab.org/koji/search?match=glob&type=build&terms=" $1 "][" $1 "]]"}' move-to-$branch-release-$dver > $branch-release-note-packages-$dver
        xargs --arg-file move-to-$branch-release-$dver osg-koji buildinfo | fgrep "/mnt" | xargs -n 1 basename | perl -p -e "s/\.(noarch|src|i386|x86_64)\.rpm//" | sort -u > $branch-release-note-rpms-$dver
    done
done

###############
# Update info #
###############

echo "Updating info tracked for releases..."

if [ ! -d /p/vdt/public/html/release-info/ ]; then
    echo not on UW\'s AFS...
    echo Enter username and machine name to use for scp, e.g. matyas@ingwe.cs.wisc.edu
    read rusermachine
fi

for branch in "${branches[@]}"; do
    for dver in el5 el6; do
        cp move-to-$branch-release-$dver $version-updated-$branch-$dver.txt
        osg-koji list-tagged --quiet --latest osg-$branch-$dver-release | awk '{print $1}' > $version-packages-$branch-$dver.txt
        xargs --arg-file $version-packages-$branch-$dver.txt osg-koji buildinfo | fgrep "/mnt" | xargs -n 1 basename | sort > $version-rpms-$branch-$dver.txt
        if [ -d /p/vdt/public/html/release-info/ ]; then
            cp $version-updated-$branch-$dver.txt $version-packages-$branch-$dver.txt $version-rpms-$branch-$dver.txt /p/vdt/public/html/release-info/
        else
            scp $version-updated-$branch-$dver.txt $version-packages-$branch-$dver.txt $version-rpms-$branch-$dver.txt $rusermachine:/p/vdt/public/html/release-info/
        fi
    done
done
