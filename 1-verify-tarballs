#!/bin/bash

usage () {
    echo "usage:"
    echo "  $(basename "$0") NON_UPCOMING_VERSIONS"
    exit
}

[[ $1 =~ ^[3-9]\.[0-9]+\.[0-9]+$ ]] || usage

dotest () {
    file=$dir/$client-$ver-1.$rhel.$arch.tar.gz
    if [ -e $file ]; then
        echo "Testing $client-$ver-1.$rhel.$arch..."
        size=$(du -m "$file" | cut -f 1)
        if [ $size -lt $min_size ]; then
            echo -e "\e[1;33mWARNING: $client-$ver-1.$rhel.$arch is too small. Check with release manager.\e[0m"
        elif [ $size -gt $max_size ]; then
            echo -e "\e[1;33mWARNING: $client-$ver-1.$rhel.$arch is too big. Check with release manager.\e[0m"
        else
            echo -e "\e[1;32mOK: $client-$ver-1.$rhel.$arch is the right size.\e[0m"
        fi
        mkdir -p $rhel-$arch
        pushd $rhel-$arch
        tar xzf ../$file
        $client/osg/osg-post-install
        $client/osgrun osg-ca-manage setupCA --url osg
        $client/osgrun osg-update-vos
        popd
        rm -rf $rhel-$arch
    else
        echo -e "\e[1;31mERROR: $client-$ver-1.$rhel.$arch tarball is missing.\e[0m"
    fi
}

cd /tmp

for ver in "$@"; do
    major_version="${ver%.*}"
    clients="osg-wn-client"
    if [ "$major_version" = "3.4" -o "$major_version" = "3.5" ]; then
        clients="$clients osg-afs-client"
    fi
    for client in $clients; do
        if [ "$major_version" = "3.4" ]; then
            rhels="el6 el7"
        else
            rhels="el7"
        fi
        for rhel in $rhels; do
            min_size=24
            max_size=28
            if [ $rhel = "el7" ]; then
                min_size=30
                max_size=34
            fi
            archs="x86_64"
            if [ "$major_version" = "3.3" -a $rhel = "el6" ]; then
                archs="i386 $archs"
            fi
            for arch in $archs; do
                dir=tarballs/$major_version/$arch
                dotest
            done
        done
    done
done

