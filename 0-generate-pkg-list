#!/bin/bash

# This script promotes osg-version to testing and generates a preliminary list of packages for the release manager

. release-common.sh

# make sure osg-koji is available before starting
check_for_osg_koji

release_tools="osg-pkgs-behind-tag"

for i in $release_tools
do
    check_for_and_add_command $i
    if [[ $? -ne 0 ]];
    then
        echo "Release tool ($i) not present in PATH"
        exit 1
    fi
done

detect_rescue_file

##################################
# Promote osg-version to testing #
##################################
promote_osg_version() {
    for ver in ${versions[@]}; do
        case $ver in
            # We don't build osg-version for upcoming or 3.5+
            3.5.* | upcoming ) continue ;;
        esac
        read -ra dvers <<< $(osg_dvers $ver) # create array of dvers
        for dver in "${dvers[@]}"; do
            for repo in testing prerelease; do
                tag=osg-$(osg_release $ver)-$dver-$repo
                versioned_tag=osg-$(osg_release $ver)-$dver-release-$ver
                # If there is already a versioned release tag, we don't
                # have to worry about tagging osg-version
                osg-koji list-tagged $versioned_tag > /dev/null 2>&1 && break

                pkg=osg-version-$ver-1.$(pkg_dist $ver $dver)
                osg-koji latest-pkg $tag osg-version | grep $pkg > /dev/null
                if [ $? -eq 1 ]; then
                    print_header "Promoting $pkg into $tag..."
                    run_cmd "osg-koji tag-pkg $tag $pkg"
                else
                    print_header "$pkg already tagged in $tag"
                fi
            done
        done
    done
    echo
}

if [[ $DATA -eq 0 ]]; then
    promote_osg_version
fi

# #############################
# # Generate list of packages #
# #############################

for ver in ${versions[@]}; do
    branch=$(osg_release $ver)
    read -ra dvers <<< $(osg_dvers $ver) # create array of dvers
    for dver in ${dvers[@]}; do
        print_header_with_line "RPMs slated for release in osg-$branch-$dver-testing"
        slated_cmd="koji-tag-diff osg-$branch-$dver-{testing,release}"
        slated=$(eval $slated_cmd | tail -n +2)
        if [[ $DRY_RUN -eq 1 ]]; then
            echo $slated_cmd
        else
            echo "$slated"
        fi
        echo

        slist=$(echo "$slated" | perl -lpe 's/(-[^-]+){2}$//' | tr '\n' ' ')
        print_header_with_line "Slated packages in testing behind current development versions"
        run_cmd "osg-pkgs-behind-tag osg-$branch-$dver-{testing,development} -- $slist"
        echo
    done
done

# Don't remove rescue files if user is troubleshooting
if [ $DRY_RUN -eq 0 ]; then
    cleanup_on_success
fi
